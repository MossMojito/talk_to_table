import streamlit as st
import pandas as pd
import re
from langchain_google_genai import ChatGoogleGenerativeAI

# --- PAGE CONFIG ---
st.set_page_config(page_title="Talk to Your Data", layout="centered")

# --- BACKEND SETUP ---
@st.cache_resource
def setup_backend():
    """Sets up the Google Gemini LLM using the secret API key."""
    print("Setting up backend...")
    try:
        # The API key is securely fetched from Streamlit's secrets manager
        llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash-latest", google_api_key=st.secrets["GOOGLE_API_KEY"])
        print("Backend setup complete.")
        return llm
    except Exception as e:
        st.error(f"Failed to set up the backend. Have you added your GOOGLE_API_KEY to Streamlit Secrets? Error: {e}")
        st.stop()

# --- HELPER FUNCTION (IMPROVED) ---
def ask_question(question: str, dataframe, llm_instance):
    """
    This function takes a question, generates Python code using the LLM,
    executes the code, and returns the final answer.
    """
    prompt = f"""
    You are an expert Python data analyst. You are given a pandas dataframe named `df`.
    DO NOT recreate the dataframe in your code. It already exists.
    Your task is to write a short python script to answer the following question.
    The final answer must be stored in a variable called `result`.

    This is the head of the dataframe `df`:
    {dataframe.head().to_markdown()}

    Question: {question}

    Write only the python code to solve the question.
    ```python
    # Your code here
    ```
    """
    
    response_code = llm_instance.invoke(prompt)
    
    # Use a regular expression for robust code extraction
    match = re.search(r"```python\n(.*?)\n```", response_code.content, re.DOTALL)
    if match:
        code_to_execute = match.group(1)
    else:
        # Fallback for when the model doesn't use the ```python block
        code_to_execute = response_code.content.strip().replace("```python", "").replace("```", "")

    print("âœ… Code generated by LLM:")
    print(code_to_execute)
    
    # Execute the generated code safely
    local_scope = {}
    try:
        exec(code_to_execute, {'df': dataframe}, local_scope)
        result = local_scope.get('result', 'No result found in the executed code.')
    except Exception as e:
        result = f"An error occurred: {e}"
        
    return result, code_to_execute

# --- MAIN APP INTERFACE ---
st.title("ðŸ“Š Talk to Your Data")
st.write("Upload a CSV file and ask a question in plain English about it.")

llm = setup_backend()
uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.dataframe(df)
    user_question = st.text_input("Your question:", placeholder="e.g., What is the total value in the 'sales' column?")

    if user_question:
        with st.spinner("AI is thinking..."):
            answer, generated_code = ask_question(user_question, df, llm)
            st.subheader("Answer")
            st.write(answer)
            with st.expander("View the code generated by the AI"):
                st.code(generated_code, language="python")
else:
    st.info("Please upload a CSV file to get started.")
